!function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(i,o,function(e){return t[e]}.bind(null,o));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var i,o=function(){function t(){}return t.shuffle=function(t){for(var e=t.length-1;e>0;e--){var n=Math.floor(Math.random()*(e+1));i=[t[n],t[e]],t[e]=i[0],t[n]=i[1]}return t;var i},t.rand=function(e){for(var n=[],i=0;i<e;i++){for(var o=[],r=0;r<e;r++)i!=r&&o.push(r);n[i]=t.shuffle(o)}return n},t.allDifferent=function(t){for(var e=0;e<t.length;e++)if(t.indexOf(t[e])!==e)return!1;return!0},t.clone=function(t){return JSON.parse(JSON.stringify(t))},t}();!function(t){t[t.Initial=0]="Initial",t[t.MakeProposal=1]="MakeProposal",t[t.FindRotation=2]="FindRotation",t[t.Delete=3]="Delete",t[t.Result=4]="Result",t[t.Finish=5]="Finish",t[t.Unsolvable=6]="Unsolvable"}(i||(i={}));var r,s=function(){return function(t,e,n,i,o){this.status=t,this.table=e,this.proposals=n,this.rotation=i,this.deletion=o}}();!function(t){t.Running_1="Phase 1 running",t.Running_2="Phase 2 running",t.Solved="solved",t.Unsolvable="unsolvable"}(r||(r={}));var a=function(){function t(t){this.status=r.Running_1,this.table=t,this.proposals=[];for(var e=0;e<t.length;e++)this.proposals.push(null);this.history=[]}return t.prototype.getHistory=function(){return this.history},t.prototype.getStatus=function(){return this.status},t.prototype.checkStatus=function(){var t=!0;this.status==r.Running_1&&null==this.getFreePerson()&&(this.status=r.Running_2);for(var e=0;e<this.table.length;e++)this.table[e].length>1&&(t=!1);return t&&(this.status=r.Solved),this.status},t.prototype.getFreePerson=function(){for(var t=0;t<this.proposals.length;t++)if(null===this.proposals[t])return t;return null},t.prototype.getPerson=function(){for(var t=0;t<this.table.length;t++)if(this.table[t].length>1)return t;return null},t.prototype.firstOf=function(t){return this.table[t][0]},t.prototype.secondOf=function(t){return this.table[t][1]},t.prototype.lastOf=function(t){return this.table[t][this.table[t].length-1]},t.prototype.nextOf=function(t){return this.lastOf(this.secondOf(t))},t.prototype.removePair=function(t,e){if(-1!=this.table[t].indexOf(e)&&-1!=this.table[e].indexOf(t)&&(this.table[t].splice(this.table[t].indexOf(e),1),this.table[e].splice(this.table[e].indexOf(t),1),0==this.table[t].length||0==this.table[e].length))throw this.status=r.Unsolvable,new Error("empty preferencelist, no stable matching possible")},t.prototype.removePairs=function(t){var e=this;t.forEach(function(t){e.removePair(t[0],t[1])})},t.prototype.findAllAfter=function(t,e){for(var n=[],i=this.table[t].indexOf(e)+1;i<this.table[t].length;)n.push([t,this.table[t][i]]),i++;return n},t.prototype.propose=function(t,e){var n=this.proposals.indexOf(e);-1!=n&&(this.proposals[n]=null),this.proposals[t]=e},t.prototype.findRotation=function(){for(var t=[],e=[],n=this.getPerson();-1===t.indexOf(n);)t.push(n),n=this.nextOf(n);e.push([n,this.firstOf(n)]);for(var i=t.pop();i!=n;)e.unshift([i,this.firstOf(i)]),i=t.pop();return e},t.prototype.findRotationVictims=function(t){for(var e=[],n=t.length,i=0;i<n;i++)e=e.concat(this.findAllAfter(t[(i+1)%n][1],t[i][0]));return e},t.prototype.print=function(){for(var t=this.table,e="",n=0;n<t.length;n++){e+=n+"["+(null===this.proposals[n]?"-":this.proposals[n])+"]| ";for(var i=0;i<t[n].length;i++)e+=t[n][i]+"  ";e+="\n"}console.log(e)},t.prototype.solve=function(){try{for(this.history.push(new s(i.Initial,o.clone(this.table),o.clone(this.proposals),null,null));this.checkStatus()===r.Running_1;){var t=this.getFreePerson(),e=this.firstOf(t);this.propose(t,e),this.history.push(new s(i.MakeProposal,o.clone(this.table),o.clone(this.proposals),void 0,void 0));var n=this.findAllAfter(e,t);this.history.push(new s(i.Delete,o.clone(this.table),o.clone(this.proposals),void 0,n)),this.removePairs(n),this.history.push(new s(i.Result,o.clone(this.table),o.clone(this.proposals),void 0,void 0))}for(;this.checkStatus()===r.Running_2;){var a=this.findRotation();this.history.push(new s(i.FindRotation,o.clone(this.table),void 0,a,void 0));n=this.findRotationVictims(a);this.history.push(new s(i.Delete,o.clone(this.table),void 0,a,n)),this.removePairs(n),this.history.push(new s(i.Result,o.clone(this.table),void 0,void 0,void 0))}return this.history.push(new s(i.Finish,o.clone(this.table),void 0,void 0,void 0)),this.table}catch(t){return this.history.push(new s(i.Unsolvable,o.clone(this.table),void 0,void 0,void 0)),console.warn(t.message),null}},t.createRandom=function(e){return new t(o.rand(e))},t}(),l=function(){function t(){this.dictionary=[]}return t.prototype.getDictionary=function(){return this.dictionary},t.prototype.lookUpOrAdd=function(t){var e=this.dictionary.indexOf(t);return-1===e?(this.dictionary.push(t),this.dictionary.length-1):e},t.prototype.lookUp=function(t){var e=this.dictionary.indexOf(t);if(-1===e)throw new Error("invalid value '"+t+"' in table");return e},t.prototype.parse=function(t,e){var n=this;t=t.trim().replace(/\t+/g," ").replace(/  +/g," ").replace(/\r\n/g,"\n"),e.value=t;var i=t.split("\n"),r=[];this.n=i.length,i.forEach(function(t){var e=t.trim().split(" ").map(function(t){return t.trim()});n.lookUpOrAdd(e[0])});for(var s=0;s<i.length;s++){var a=[],l=i[s].trim().split(" ").map(function(t){return t.trim()});if(l.length-1!=this.n)throw new Error("wrong number of elements in row ["+s+"]");if(!o.allDifferent(l))throw new Error("duplicated value in row with index ["+s+"]");var h=this.lookUp(l[0]);if("|"!=l[1])throw new Error("invalid syntax, there is no | separator");l.shift(),l.shift();for(var c=0,u=l;c<u.length;c++){var d=u[c];a.push(this.lookUp(d))}r[h]=a}if(this.dictionary.length!==this.n)throw new Error("invalid table");return r},t}(),h=function(){return function(t,e,n,i){void 0===e&&(e=!1),void 0===n&&(n=!1),void 0===i&&(i=!1),this.value=t,this.d=e,this.r=n,this.c=i}}(),c=function(){function t(t,e,n){void 0===t&&(t=document.createElement("div")),void 0===e&&(e=document.createElement("table")),void 0===n&&(n=document.createElement("nav"));var i=this;this.controls=t,this.target=e,this.navigation=n,this.buttonLeft=document.createElement("button"),this.buttonRight=document.createElement("button"),this.pageNumber=document.createElement("span"),this.buttonLeft.textContent="<",this.buttonRight.textContent=">",this.pageNumber.textContent="0",this.checkbox=document.createElement("input"),this.checkbox.type="checkbox",this.controls.appendChild(this.buttonLeft),this.controls.appendChild(this.pageNumber),this.controls.appendChild(this.buttonRight),this.controls.appendChild(this.checkbox),this.controls.appendChild(document.createTextNode("show deleted pairs")),this.buttonLeft.addEventListener("click",function(){i.showPrev()}),this.buttonRight.addEventListener("click",function(){i.showNext()}),this.checkbox.addEventListener("click",function(){i.toggleShowDeletedPairs()}),this.navigation.addEventListener("click",function(t){i.navClicked(t)}),document.addEventListener("keydown",function(t){!i.history||37!=t.keyCode&&38!=t.keyCode?!i.history||39!=t.keyCode&&40!=t.keyCode||i.showNext():i.showPrev()})}return t.prototype.setDictionary=function(t){this.dictionary=t},t.prototype.lookUp=function(t){return null!=this.dictionary&&this.dictionary.length>t?this.dictionary[t]:t.toString()},t.prototype.setHistory=function(t){this.history=t,this.currentIndex=0,t.length>0&&(this.dimensions=t[0].table.length,this.setUp(),this.createNav())},t.prototype.setTarget=function(t){this.target=t},t.prototype.setUp=function(){this.target.innerHTML="";for(var t=document.createDocumentFragment(),e=document.createElement("tr"),n=document.createElement("td"),i=0;i<this.dimensions;i++){var o=e.cloneNode(!0),r=n.cloneNode(!0);r.classList.add("head"),r.innerHTML=i.toString(),o.appendChild(r);var s=n.cloneNode(!0);s.innerHTML=" | ",o.appendChild(s);for(var a=0;a<this.dimensions-1;a++){var l=n.cloneNode(!0);l.innerHTML="-",o.appendChild(l)}t.appendChild(o)}this.target.appendChild(t)},t.prototype.statusToString=function(t){switch(t){case i.Initial:return"initial table";case i.MakeProposal:return"make a proposal";case i.FindRotation:return"find rotation";case i.Delete:return"delete pairs";case i.Result:return"result";case i.Finish:return"matching found";case i.Unsolvable:return"unsolvable";default:return""}},t.prototype.createNav=function(){var t=document.createDocumentFragment(),e=document.createElement("div");e.classList.add("navElement");for(var n=0;n<this.history.length;n++){var i=this.history[n],o=e.cloneNode(!0);o.innerHTML+="<span>"+(n+1).toString()+".</span><span>"+this.statusToString(i.status)+"</span>",o.classList.add("status-"+i.status),o.setAttribute("index",n.toString()),t.appendChild(o)}this.navigation.innerHTML="",this.navigation.appendChild(t)},t.prototype.render=function(){var t=this,e=this.history[this.currentIndex],n=this.computeDiff(e);this.clearDecorations();for(var i=0;i<n.length;i++){var o=this.getElement(i);o.textContent=this.lookUp(i),void 0!=e.proposals&&null!=e.proposals[i]&&(o.innerHTML+="<span class='sub'> &#x1F48D;"+this.lookUp(e.proposals[i])+"</span>");for(var r=0;r<n[i].length;r++){var s=n[i][r],a=this.getElement(i,r);a.textContent=this.lookUp(s.value),s.r&&a.classList.add("highlight-3"),s.c&&a.classList.add("highlight-2"),s.d&&a.classList.add("dead")}}null!=e.rotation&&e.rotation.forEach(function(e){t.getElement(e[0]).classList.add("highlight-3")}),this.renderPager()},t.prototype.clearDecorations=function(){for(var t=this.target.querySelectorAll("td"),e=[].slice.call(t),n=0;n<e.length;n++)e[n].classList.remove("dead"),e[n].classList.remove("highlight-1"),e[n].classList.remove("highlight-2"),e[n].classList.remove("highlight-3"),e[n].classList.remove("highlight-4")},t.prototype.navClicked=function(t){for(var e=t.target;!e.classList.contains("navElement")&&"NAV"!=e.nodeName;)e=e.parentElement;e.classList.contains("navElement")&&(this.currentIndex=parseInt(e.getAttribute("index")),this.render())},t.prototype.showPrev=function(){this.currentIndex>0&&(this.currentIndex--,this.render())},t.prototype.showNext=function(){this.currentIndex+1<this.history.length&&(this.currentIndex++,this.render())},t.prototype.renderPager=function(){var t=this.history.length,e=this.currentIndex+1;this.pageNumber.innerHTML=e+" / "+t,this.buttonLeft.disabled=1==e,this.buttonRight.disabled=e==t;var n=this.navigation.querySelector(".navElement.active");n&&n.classList.remove("active"),this.navigation.querySelector(".navElement[index='"+this.currentIndex+"']").classList.add("active")},t.prototype.toggleShowDeletedPairs=function(){this.checkbox.checked?this.target.classList.add("showDeleted"):this.target.classList.remove("showDeleted")},t.prototype.getElement=function(t,e){void 0===e&&(e=-1);var n="";return t+=1,n=-1==e?"tr:nth-child("+t+") td.head":"tr:nth-child("+t+") td:nth-child("+(e+=3)+")",this.target.querySelector(n)},t.prototype.computeDiff=function(t){var e=[],n=this.history[0];if(t.status==i.Initial)for(var o=0;o<t.table.length;o++){for(var r=t.table[o],s=[],a=0;a<r.length;a++)s.push(new h(r[a]));e.push(s)}else{var l=n.table,c=t.table,u=function(n){for(var i=l[n],o=c[n],r=[],s=function(e){var s=i[e];if(-1===o.indexOf(s))r.push(new h(s,!0));else{var a=new h(s);void 0!==t.rotation&&t.rotation.forEach(function(t){t[0]===n&&l[t[0]].indexOf(t[1])===e&&(a.r=!0)}),void 0!==t.deletion&&t.deletion.forEach(function(t){(t[0]===n&&l[t[0]].indexOf(t[1])===e||t[1]===n&&l[t[1]].indexOf(t[0])===e)&&(a.c=!0)}),r.push(a)}},a=0;a<i.length;a++)s(a);e.push(r)};for(o=0;o<l.length;o++)u(o)}return e},t}(),u=function(){function t(t,e,n){var i=this;this.controls=t,this.setupWindow=e,this.demoWindow=n,this.textarea=e.querySelector("textarea"),t.querySelector("button").addEventListener("click",function(){i.toggleWindows()}),e.querySelector("#createButton").addEventListener("click",function(){i.startDemo()}),this.renderer=new c(n.querySelector("#controls"),n.querySelector("#demoTarget"),n.querySelector("nav"))}return t.prototype.toggleWindows=function(){this.setupWindow.classList.contains("closed")?(this.setupWindow.classList.remove("closed"),this.demoWindow.classList.add("closed")):(this.setupWindow.classList.add("closed"),this.demoWindow.classList.remove("closed"))},t.prototype.startDemo=function(){try{var t=this.textarea.value;if(-1===t.trim().indexOf(" ")){var e=parseInt(t.trim());if(e<2||e%2!=0)throw new Error("invalid number passed");this.preferenceList=a.createRandom(e),this.renderer.setDictionary(null)}else{var n=new l,i=n.parse(t,this.textarea),o=n.getDictionary();this.preferenceList=new a(i),this.renderer.setDictionary(o)}this.preferenceList.solve();var r=this.preferenceList.getHistory();this.renderer.setHistory(r),this.toggleWindows(),this.renderer.render()}catch(t){console.warn(t),alert(t)}},t}();let d;window.addEventListener("DOMContentLoaded",function(){let t=document.getElementById("controls"),e=document.getElementById("setupWindow"),n=document.getElementById("demoWindow");d=new u(t,e,n)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,